dbinom(x,20,0.1)
dbinom(1,20,0.1)
dbinom(2,20,0.1)
plot(dbinom(x,20,0.1))
plot(dbinom(seq(1,20),20,0.1))
?seq
seq(0,10)
seq(0,10,2)
seq(0,10,length=100)
seq(0,10,length=10)
seq(0,1,50)
seq(0,1,length=50)
prior = rep(1,50)
plot(prior)
likelihood = dbinom(6,9,0)
likelihood = dbinom(6,9,1)
dbinom(6,9,1)
dbinom(9,9,1)
dbinom(6,9,0.1)
dbinom(0,9,0.1)
dbinom(0,9,0)
dbinom(0,9,0.1)
n=50
positives = 7
dbinom(positives,n,0.4)
positives = 30
dbinom(positives,n,0.4)
source("~/DSProjects/RProjects/GridApproximation.R", echo=TRUE)
source("~/DSProjects/RProjects/GridApproximation.R", echo=TRUE)
source("~/DSProjects/RProjects/GridApproximation.R", echo=TRUE)
source("~/DSProjects/RProjects/GridApproximation.R", echo=TRUE)
plot( p_grid , likelihood , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
sample_size = 50;
p_grid = seq(from=0,to=1, length=sample_size)
#define prior;
prior = rep(1,sample_size) # we assign the same prior probability for all values in the grid
likelihood = dbinom(6,9,p_grid)
unstd_posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd_posterior / sum(unstd_posterior)
plot( p_grid , posterior , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
#partition screen
par(mfrow=c(2,2))
plot( p_grid , likelihood , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
source("~/DSProjects/RProjects/GridApproximation.R", echo=TRUE)
source("~/DSProjects/RProjects/GridApproximation.R", echo=TRUE)
source("~/DSProjects/RProjects/GridApproximation.R", echo=TRUE)
source("~/DSProjects/RProjects/GridApproximation.R", echo=TRUE)
plot( p_grid , posterior , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
source("~/DSProjects/RProjects/GridApproximation.R", echo=TRUE)
source("~/DSProjects/RProjects/GridApproximation.R", echo=TRUE)
source("~/DSProjects/RProjects/GridApproximation.R", echo=TRUE)
source("~/DSProjects/RProjects/GridApproximation.R", echo=TRUE)
source("~/DSProjects/RProjects/GridApproximation.R", echo=TRUE)
source("~/DSProjects/RProjects/GridApproximation.R", echo=TRUE)
data (gala)
library(faraway)
data (gala)
setwd("~/DSProjects/RProjects/BDA/Chapter10")
setwd("~/DSProjects/RProjects/BDA/Chapter10")
library(faraway)
data (gala)
head(gala)
head(gala)
X <- design.matrix(~ Area + Elevation + Nearest + Scruz
+ Adjacent, data=gala)
X <- model.matrix(~ Area + Elevation + Nearest + Scruz
+ Adjacent, data=gala)
head(X)
X <- model.matrix(~ Area + Elevation + Nearest + Scruz
+ Adjacent-1, data=gala)
head(X)
y <- gala$Species
X.shape
dim(X)
N = length(y)
K = ncol(X)
rstan:::rstudio_stanc("weight_model.stan")
stan_data = list(N=N,K=K,y=y, X=X)
y <- gala$Species
N = length(y)
K = ncol(X)
stan_data = list(N=N,K=K,y=y, X=X)
model =stan(file='linear.stan',data=stan_data,cores=4)
library(rstan)
data (gala)
head(gala)
X <- model.matrix(~ Area + Elevation + Nearest + Scruz
+ Adjacent-1, data=gala)
head(X)
y <- gala$Species
N = length(y)
K = ncol(X)
stan_data = list(N=N,K=K,y=y, X=X)
model =stan(file='linear.stan',data=stan_data,cores=4)
model =stan(file='linear.stan',data=stan_data,cores=4)
print(model)
head(X)
?scale
X.scale <- scale(X)
X.scale
head(X.scale)
data("sexab")
head(data("sexab"))
data = data("sexab")
data = data("sexlab")
data = data(sexab)
data
head(sexab)
head(sexab)
summary(sexab)
str(sexab$csa)
summary(sexab)
X = model.matrix(~ cpa + csa-1,data = sexab)
head(X)
tail(X)
head(X)
X = model.matrix(~ cpa + csa, data = sexab)
head(X)
X = model.matrix(~ cpa + csa, data = sexab)
head(X)
y = sexab$ptsd
N= length(y)
K=ncol(X)
stan_data = list(N=N,K=K,y=y, X=X)
model =stan(file='linear.stan',data=stan_data,cores=4)
print(model)
X
head(X)
print(model)
print(model)
head(X)
########
library(daewr)
data(COdata)
head(COdata)
sumary(COdata)
summary(COdata)
?interaction.plot
interaction.plot(Eth,Ratio,CO,data=COdata)
interaction.plot(Eth,Ratio,CO,data=COdata)
interaction.plot(COdata$Eth,COdata$Ratio,COdata$CO)
X = model.matrix(~Eth+Ratio,data = COdata)
head(X)
X = model.matrix(~Eth*Ratio,data = COdata)
head(X)
setwd("~/Documents/PERSONAL/UNF/MCIS-DS/SEMESTER II - Spring/Data Analytics/BABook/Chapter 6")
xlsx
?xlsx
library(readxl)
data <- read_excel(data_file_path)
data_file_path <- '../../BA 4e Data Files/Chapter 06/EAI.xlsx'
data <- read_excel(data_file_path)
head(data)
salary_mean <- mean(data$`Annual Salary`)
salary_sd <- sd(data$`Annual Salary`)
attended_program <- data$`Training Program`[data$`Training Program`=='Yes']
attended_program <- length(data$`Training Program`[data$`Training Program`=='Yes'])
p <- length(data$`Training Program`[data$`Training Program`=='Yes'])/length(data$`Training Program`)
sample_employees <- rnorm(2500)
sample_employees <- sample(data,30)
sample_employees <- sample(data,30,replace=True)
sample_employees <- sample(data,30,replace=TRUE)
?sample
head(sample_employees)
View(sample_employees)
sample_employees <- sample(data$Manager,30,replace=TRUE)
sample_employees <- data[sample(nrow(data),30,replace=TRUE)]
sample_employees <- data[sample(nrow(data),30,)]
sample(1:nrow(data),30)
sample_employees <- data[sample(1:nrow(data),30,)]
sample_employees <- data[sample(1:nrow(data),30)]
sample(data,3)
sample(data,3)
sample(data,3,replace = TRUE)
sample(data,3,replace = TRUE)
sample(data,3,replace = TRUE)
sample_employees <- sample(data,30,replace = TRUE)
length(sample_employees)
View(sample_employees)
nrow
nrows(sample_employees)
nrow(sample_employees)
dim(sample_employees)
sample_employees <- sample.int(data,30,replace = TRUE)
sample_employees <- sample_n(data,30,replace = TRUE)
library(dplyr)
sample_employees <- sample_n(data,30,replace = TRUE)
sample_employees <- sample_n(data,30,replace = TRUE)
sample_mean = mean(sample_employees)
sample_mean = mean(sample_employees$`Annual Salary`)
sample_sd = sd(sample_employees$`Annual Salary`)
sample_employees <- sample_n(data,30,replace = TRUE)
sample_mean = mean(sample_employees$`Annual Salary`)
sample_sd = sd(sample_employees$`Annual Salary`)
p_sample = length(sample_employees$`Training Program`[sample_employees$`Training Program`=='Yes'])/(length(sample_employees))
p_sample = length(sample_employees$`Training Program`[sample_employees$`Training Program`=='Yes'])/(length(sample_employees$`Training Program`))
sample_employees <- sample_n(data,30,replace = TRUE)
sample_mean = mean(sample_employees$`Annual Salary`)
sample_sd = sd(sample_employees$`Annual Salary`)
p_sample = length(sample_employees$`Training Program`[sample_employees$`Training Program`=='Yes'])/(length(sample_employees$`Training Program`))
sample_employees <- sample_n(data,30,replace = TRUE)
sample_mean = mean(sample_employees$`Annual Salary`)
sample_sd = sd(sample_employees$`Annual Salary`)
p_sample = length(sample_employees$`Training Program`[sample_employees$`Training Program`=='Yes'])/(length(sample_employees$`Training Program`))
sample_employees <- sample_n(data,30,replace = TRUE)
sample_mean = mean(sample_employees$`Annual Salary`)
sample_sd = sd(sample_employees$`Annual Salary`)
p_sample = length(sample_employees$`Training Program`[sample_employees$`Training Program`=='Yes'])/(length(sample_employees$`Training Program`))
sample_employees <- sample_n(data,30,replace = TRUE)
sample_mean = mean(sample_employees$`Annual Salary`)
sample_sd = sd(sample_employees$`Annual Salary`)
p_sample = length(sample_employees$`Training Program`[sample_employees$`Training Program`=='Yes'])/(length(sample_employees$`Training Program`))
setwd("~/Documents/PERSONAL/UNF/MCIS-DS/Modeling/Regression")
setwd("~/Documents/PERSONAL/UNF/MCIS-DS/Modeling/Regression")
library(rstan)
head(data)
file_path <- 'datasets/USA_Housing.csv'
data <- read.csv(file_path)
head(data)
str(data)
dim(data)
colnames(data)
colnames(data)
price <- data$Price
plot(price)
plot(price,pch=20)
plot(price,pch=10)
plot(price,pch=30)
plot(price,pch=20)
predictor_matrix <-model.matrix(~ Avg..Area.Income+ Avg..Area.House.Age + Avg..Area.Number.of.Rooms + Avg..Area.Number.of.Bedrooms+
Area.Population,data = data)
head(predictor_matrix)
plot(data$Avg..Area.Income,price)
plot(data$Avg..Area.House.Age,price)
stan_data <- list(N=N,K=K,price,predictor_matrix=predictor_matrix)
N=length(price)
K=ncol(predictor_matrix)
stan_data <- list(N=N,K=K,price,predictor_matrix=predictor_matrix)
stan_data <- list(N=N,K=K,price,predictor_matrix=predictor_matrix)
model <- stan(file = 'housing.stan',data = stan_data,cores=4)
stan_data <- list(N=N,K=K,price=price,predictor_matrix=predictor_matrix)
model <- stan(file = 'housing.stan',data = stan_data,cores=4)
model <- stan(file = 'housing.stan',data = stan_data,cores=4)
print(model)
# Extract model parameters:
beta <- extract(model)$beta
sigma <- extract(model)$sigma
beta
dim(beta)
# Predictions:
x = predictor_matrix[1,]
y = beta*x + sigma
y = x*beta + sigma
y = x*beta[1] + sigma
# Predictions:
x = predictor_matrix[1,1:]
# Predictions:
x = predictor_matrix[1,1,]
# Predictions:
x = predictor_matrix[1,1]
# Predictions:
x = predictor_matrix[1,2:]
# Predictions:
x = predictor_matrix[1,2,]
# Predictions:
x = predictor_matrix[1,2]
# Predictions:
x = predictor_matrix[1,2:]
# Predictions:
x = predictor_matrix[1,2:3]
# Predictions:
x = predictor_matrix[1,2:ncol(predictor_matrix)]
y = x*beta[1] + sigma
plot(y)
hist(y)
price[1]
mean(y)
y = x*beta[1,] + sigma
sigma
hist(sigma)
hist(beta[,1])
hist(beta[,2])
hist(beta[,3])
# y = x*beta[1,] + sigma
y = rnorm(1000,x*beta,sigma)
hist(y)
stan_data <- list(N=N,K=K,price=price,predictor_matrix=predictor_matrix)
model <- stan(file = 'housing.stan',data = stan_data,cores=4)
setwd("~/Downloads/mk")
# setwd("C:\\Users\\emwambel\\OneDrive - Florida International University\\ENOCK_FIU\\Paper\\ITE Dr.Alluri") #set the working directory
DataITE=read.csv("ITEEnock2.csv")
print(cor(DataITE))
library('foreign')
library('ggplot2')
library('MASS')
library('GGally')
library('randomForest')
library("Boruta")
library("DMWR")
library('brms')
Light_Cond = as.factor(DataITE$Light.Condition)
Weather_Cond = as.factor(DataITE$Weather.Condition)
Typ_of_Shlder = as.factor(DataITE$Type.of.Shoulder)
Signal = as.factor(DataITE$Signal)
#Road_Surf_Cond = as.factor(DataITE$Road.Surface.Condition)
#Traffic_Contr_Systm = as.factor(DataITE$Traffic.Control.System)
Crash_Location = as.factor(DataITE$Crash.Location)
Trafficway = as.factor(DataITE$Trafficway)
#Bike_Lane = as.factor(DataITE$Presence.of.Bike.Lane)
AADT = as.factor(DataITE$AADT)
Speed_Limit = as.factor(DataITE$Posted.Speed.Limit)
#Lane_Width = as.factor(DataITE$Lane.Width)
Sidewalk_Width = as.factor(DataITE$Sidewalk.Width)
Shoulder_Width = as.factor(DataITE$Shoulder.Width)
At_Fault = as.factor(DataITE$At.fault.party)
Vehicle_Maneuver = as.factor(DataITE$Vehicle.Maneuver)
NM_Maneuver = as.factor(DataITE$NM.Maneuver)
Driver_Age = as.factor(DataITE$Drivers.Age)
#NM_Age = as.factor(DataITE$NMs.Age)
Driver_Gender = as.factor(DataITE$Drivers.Gender)
#NM_Gender = as.factor(DataITE$NMs.Gender)
Time_of_the_Day = as.factor(DataITE$Time.of.the.Day)
Day_of_the_Week = as.factor(DataITE$Day.of.the.Week)
# Categorical Response variables
Injury_Severity<-as.factor(DataITE$Injury.Severity)
df<-data.frame(Injury_Severity,Light_Cond,Typ_of_Shlder,Crash_Location,Trafficway,AADT,Speed_Limit,
Sidewalk_Width,Shoulder_Width,At_Fault,Vehicle_Maneuver,NM_Maneuver,Driver_Age,Driver_Gender,
Time_of_the_Day,Day_of_the_Week)
#Logit model
# Fit the Bayesian logit model
Get_prior_logit <- get_prior(Injury_Severity ~ Light_Cond+Typ_of_Shlder+Crash_Location+Trafficway+AADT+Speed_Limit+
Sidewalk_Width+Shoulder_Width+At_Fault+Vehicle_Maneuver+Driver_Age+Driver_Gender+
+Time_of_the_Day+Day_of_the_Week, # correlated random-effect
data=df, family= bernoulli(link = 'logit'))
Get_prior_logit
Intercept_prior_logit <- prior(student_t(3, 0, 2.5), class="Intercept")
CXX14 = "C:/Rtools/mingw_64/bin/g++.exe"
fit_logit <- brm(Injury_Severity ~ Light_Cond+Typ_of_Shlder+Crash_Location+Trafficway+AADT+Speed_Limit+
Sidewalk_Width+Shoulder_Width+At_Fault+Vehicle_Maneuver+NM_Maneuver+Driver_Age+Driver_Gender+
Time_of_the_Day+Day_of_the_Week,
data=df,
family=bernoulli(link = 'logit'),
prior = Priors_logit,
control = list(adapt_delta = 0.99, max_treedepth = 15),
init = 0,
chains=3,
iter=4000,
warmup=2000,
thin=10,
seed = 123)
library('brms')
Light_Cond = as.factor(DataITE$Light.Condition)
Weather_Cond = as.factor(DataITE$Weather.Condition)
Typ_of_Shlder = as.factor(DataITE$Type.of.Shoulder)
Signal = as.factor(DataITE$Signal)
#Road_Surf_Cond = as.factor(DataITE$Road.Surface.Condition)
#Traffic_Contr_Systm = as.factor(DataITE$Traffic.Control.System)
Crash_Location = as.factor(DataITE$Crash.Location)
Trafficway = as.factor(DataITE$Trafficway)
#Bike_Lane = as.factor(DataITE$Presence.of.Bike.Lane)
AADT = as.factor(DataITE$AADT)
Speed_Limit = as.factor(DataITE$Posted.Speed.Limit)
#Lane_Width = as.factor(DataITE$Lane.Width)
Sidewalk_Width = as.factor(DataITE$Sidewalk.Width)
Shoulder_Width = as.factor(DataITE$Shoulder.Width)
At_Fault = as.factor(DataITE$At.fault.party)
Vehicle_Maneuver = as.factor(DataITE$Vehicle.Maneuver)
NM_Maneuver = as.factor(DataITE$NM.Maneuver)
Driver_Age = as.factor(DataITE$Drivers.Age)
#NM_Age = as.factor(DataITE$NMs.Age)
Driver_Gender = as.factor(DataITE$Drivers.Gender)
#NM_Gender = as.factor(DataITE$NMs.Gender)
Time_of_the_Day = as.factor(DataITE$Time.of.the.Day)
Day_of_the_Week = as.factor(DataITE$Day.of.the.Week)
# Categorical Response variables
Injury_Severity<-as.factor(DataITE$Injury.Severity)
df<-data.frame(Injury_Severity,Light_Cond,Typ_of_Shlder,Crash_Location,Trafficway,AADT,Speed_Limit,
Sidewalk_Width,Shoulder_Width,At_Fault,Vehicle_Maneuver,NM_Maneuver,Driver_Age,Driver_Gender,
Time_of_the_Day,Day_of_the_Week)
#Logit model
# Fit the Bayesian logit model
Get_prior_logit <- get_prior(Injury_Severity ~ Light_Cond+Typ_of_Shlder+Crash_Location+Trafficway+AADT+Speed_Limit+
Sidewalk_Width+Shoulder_Width+At_Fault+Vehicle_Maneuver+Driver_Age+Driver_Gender+
+Time_of_the_Day+Day_of_the_Week, # correlated random-effect
data=df, family= bernoulli(link = 'logit'))
Get_prior_logit
Intercept_prior_logit <- prior(student_t(3, 0, 2.5), class="Intercept")
CXX14 = "C:/Rtools/mingw_64/bin/g++.exe"
fit_logit <- brm(Injury_Severity ~ Light_Cond+Typ_of_Shlder+Crash_Location+Trafficway+AADT+Speed_Limit+
Sidewalk_Width+Shoulder_Width+At_Fault+Vehicle_Maneuver+NM_Maneuver+Driver_Age+Driver_Gender+
Time_of_the_Day+Day_of_the_Week,
data=df,
family=bernoulli(link = 'logit'),
prior = Priors_logit,
control = list(adapt_delta = 0.99, max_treedepth = 15),
init = 0,
chains=3,
iter=4000,
warmup=2000,
thin=10,
seed = 123)
Priors_logit = c(Intercept_prior_logit)
CXX14 = "C:/Rtools/mingw_64/bin/g++.exe"
fit_logit <- brm(Injury_Severity ~ Light_Cond+Typ_of_Shlder+Crash_Location+Trafficway+AADT+Speed_Limit+
Sidewalk_Width+Shoulder_Width+At_Fault+Vehicle_Maneuver+NM_Maneuver+Driver_Age+Driver_Gender+
Time_of_the_Day+Day_of_the_Week,
data=df,
family=bernoulli(link = 'logit'),
prior = Priors_logit,
control = list(adapt_delta = 0.99, max_treedepth = 15),
init = 0,
chains=3,
iter=4000,
warmup=2000,
thin=10,
seed = 123)
fit_90_BCI <- print(summary(fit, prob = 0.90, WAIC=TRUE), digits = 3)
fit_90_BCI <- print(summary(fit_logit, prob = 0.90, WAIC=TRUE), digits = 3)
fit_95_BCI <- print(summary(fit_logit, WAIC=TRUE), digits = 3)
setwd("~/Documents/PERSONAL/UNF/MCIS-DS/Modeling/Regression")
price_pred <- extract(model)$price_pred
hist(extract(model)$min_price)
abline(v=min(price),col='red')
mean(extract(model)$min_price > min(price))
fit_90_BCI <- print(summary(fit_logit, prob = 0.90, WAIC=TRUE), digits = 3)
fit_95_BCI <- print(summary(fit_logit, WAIC=TRUE), digits = 3)
setwd("~/Documents/PERSONAL/UNF/MCIS-DS/Modeling/Regression")
hist(extract(model)$max_price)
abline(v=max(price), col='red')
mean(extract(model)$max_price > max(price))
hist(extract(model)$range_price)
abline(v=max(price)-min(price),col='red')
hist(extract(model)$var_price)
abline(v=sd(price)^2,col='red')
mean(extract(model)$range_price > (max(price)-min(price)))
mean(extract(model)$var_price > (sd(price))^2)
# Predictions:
x = predictor_matrix[1,2:ncol(predictor_matrix)]
hist(price_pred)
dim(beta)
dim(x)
# Predictions:
x = predictor_matrix[1,2:ncol(predictor_matrix)]
dim(x)
x
type(x)
typeof(x)
str(x)
# Predictions:
x = as.matrix(predictor_matrix[1,2:ncol(predictor_matrix)])
dim(x)
x = head(predictor_matrix,1)
# y = x*beta[1,] + sigma
y = rnorm(1000,x*beta,sigma)
dim(x)
dim(beta)
# y = x*beta[1,] + sigma
y = rnorm(1000,beta*x,sigma)
